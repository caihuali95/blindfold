use crate::*;

const RDWR:             bool = true;
const ROLY:             bool = false;
const MAX_SYSID:        usize = 500;
const MAX_N_CAP:        usize = 500;
static mut CAP_RANGE:   [(usize, usize); MAX_SYSID] = [(0, 0); MAX_SYSID];
static mut CAP_TABLE:   [(usize, usize, usize, u8, bool); MAX_N_CAP] = [(0, 0, 0, 0, false); MAX_N_CAP];

pub const TY_SIZEOBJ:   u8 = 0;     // sized object
pub const TY_NOLIMIT:   u8 = 1;     // skip check, e.g., ioctl
pub const TY_MINCORE:   u8 = 2;     // mincore
pub const TY_CSTRING:   u8 = 3;     // null byte terminated c string
pub const TY_STRLIST:   u8 = 4;     // null pointer terminated list of c string
pub const TY_FTXLIST:   u8 = 5;     // list of futex_waitv
pub const TY_IOVLIST:   u8 = 6;     // list of iovec
pub const TY_MSGLIST:   u8 = 7;     // list of mmsghdr
pub const TY_FHANDLE:   u8 = 8;     // file_handle
pub const TY_SOCKOPT:   u8 = 9;     // sockopt
pub fn ext_cap(ty: u8) -> bool { ty >= TY_STRLIST }

// Do not support: 75, c4, c5, 10e, 10f
// Check operation-specific access capabilities: 19, 1d, 28, 3c, a7, db, 1ab, 1af, 1bb
pub fn init_syscall_cap_table() {
    let mut n_cap = 0;
    unsafe {
        // nested kernel data struct
        CAP_RANGE[0x0dd] = (n_cap, 3);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x08, 0x00, TY_STRLIST, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x08, 0x00, TY_STRLIST, ROLY); n_cap += 1;
        CAP_RANGE[0x1c1] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x01, 0x18, TY_FTXLIST, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x041] = (n_cap, 1);
        CAP_RANGE[0x042] = (n_cap, 1);
        CAP_RANGE[0x045] = (n_cap, 1);
        CAP_RANGE[0x046] = (n_cap, 1);
        CAP_RANGE[0x04b] = (n_cap, 1);
        CAP_RANGE[0x11e] = (n_cap, 1);
        CAP_RANGE[0x11f] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x02, 0x10, TY_IOVLIST, ROLY); n_cap += 1;
        CAP_RANGE[0x0d3] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x38, 0x00, TY_MSGLIST, ROLY); n_cap += 1;
        CAP_RANGE[0x0d4] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x38, 0x00, TY_MSGLIST, RDWR); n_cap += 1;
        CAP_RANGE[0x0f3] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x02, 0x40, TY_MSGLIST, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x10d] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x02, 0x40, TY_MSGLIST, RDWR); n_cap += 1;
        CAP_RANGE[0x108] = (n_cap, 3);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x10, 0x00, TY_FHANDLE, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x109] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x10, 0x00, TY_FHANDLE, RDWR); n_cap += 1;
        CAP_RANGE[0x0d1] = (n_cap, 1);
        CAP_TABLE[n_cap] = (4, 0x04, 0x00, TY_SOCKOPT, RDWR); n_cap += 1;
        // c string and sized object
        CAP_RANGE[0x005] = (n_cap, 3);
        CAP_RANGE[0x006] = (n_cap, 3);
        CAP_RANGE[0x0d9] = (n_cap, 3);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x03, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x007] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x03, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x008] = (n_cap, 3);
        CAP_RANGE[0x009] = (n_cap, 3);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x03, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x00a] = (n_cap, 2);
        CAP_RANGE[0x04e] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x03, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x00b] = (n_cap, 2);
        CAP_RANGE[0x00c] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x02, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x00e] = (n_cap, 2);
        CAP_RANGE[0x00f] = (n_cap, 2);
        CAP_RANGE[0x029] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_RANGE[0x010] = (n_cap, 1);
        CAP_RANGE[0x01b] = (n_cap, 1);
        CAP_RANGE[0x021] = (n_cap, 1);
        CAP_RANGE[0x022] = (n_cap, 1);
        CAP_RANGE[0x023] = (n_cap, 1);
        CAP_RANGE[0x030] = (n_cap, 1);
        CAP_RANGE[0x035] = (n_cap, 1);
        CAP_RANGE[0x036] = (n_cap, 1);
        CAP_RANGE[0x038] = (n_cap, 1);
        CAP_RANGE[0x03c] = (n_cap, 1);
        CAP_RANGE[0x1ac] = (n_cap, 1);
        CAP_RANGE[0x1b1] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_RANGE[0x024] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_RANGE[0x025] = (n_cap, 2);
        CAP_RANGE[0x026] = (n_cap, 2);
        CAP_RANGE[0x114] = (n_cap, 2);
        CAP_RANGE[0x1ad] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_RANGE[0x027] = (n_cap, 1);
        CAP_RANGE[0x02d] = (n_cap, 1);
        CAP_RANGE[0x031] = (n_cap, 1);
        CAP_RANGE[0x033] = (n_cap, 1);
        CAP_RANGE[0x059] = (n_cap, 1);
        CAP_RANGE[0x06a] = (n_cap, 1);
        CAP_RANGE[0x0b5] = (n_cap, 1);
        CAP_RANGE[0x0e0] = (n_cap, 1);
        CAP_RANGE[0x0e1] = (n_cap, 1);
        CAP_RANGE[0x117] = (n_cap, 1);
        CAP_RANGE[0x1ae] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_RANGE[0x028] = (n_cap, 3);
        CAP_RANGE[0x0da] = (n_cap, 3);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_RANGE[0x02b] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x78, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x04f] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x058] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x20, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x08e] = (n_cap, 1);
        CAP_TABLE[n_cap] = (3, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_RANGE[0x0b4] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x40, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x107] = (n_cap, 1);
        CAP_TABLE[n_cap] = (4, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_RANGE[0x123] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x100,0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x1b5] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x03, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x1ba] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x01, 0x00, TY_CSTRING, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x20, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        // no extensible capabilities in the following
        CAP_RANGE[0x01d] = (n_cap, 1);
        CAP_TABLE[n_cap] = (2, 0xA0, 0x00, TY_NOLIMIT, RDWR); n_cap += 1;
        CAP_RANGE[0x0e8] = (n_cap, 1);
        CAP_TABLE[n_cap] = (2, 0x01, 0x01, TY_MINCORE, RDWR); n_cap += 1;
        CAP_RANGE[0x00d] = (n_cap, 1);
        CAP_RANGE[0x03d] = (n_cap, 1);
        CAP_RANGE[0x03f] = (n_cap, 1);
        CAP_RANGE[0x043] = (n_cap, 1);
        CAP_RANGE[0x074] = (n_cap, 1);
        CAP_RANGE[0x0c8] = (n_cap, 1);
        CAP_RANGE[0x113] = (n_cap, 1);
        CAP_RANGE[0x118] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x02, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x011] = (n_cap, 1);
        CAP_RANGE[0x063] = (n_cap, 1);
        CAP_RANGE[0x085] = (n_cap, 1);
        CAP_RANGE[0x088] = (n_cap, 1);
        CAP_RANGE[0x116] = (n_cap, 1);
        CAP_RANGE[0x125] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0x01, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x015] = (n_cap, 1);
        CAP_TABLE[n_cap] = (3, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x016] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x02, 0x10, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x05, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x019] = (n_cap, 1);
        CAP_TABLE[n_cap] = (2, 0x20, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x02c] = (n_cap, 1);
        CAP_RANGE[0x1a9] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x78, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x03b] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x040] = (n_cap, 1);
        CAP_RANGE[0x044] = (n_cap, 1);
        CAP_RANGE[0x0cb] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x02, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x047] = (n_cap, 1);
        CAP_TABLE[n_cap] = (2, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x048] = (n_cap, 5);
        CAP_TABLE[n_cap] = (1, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (5, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x049] = (n_cap, 3);
        CAP_TABLE[n_cap] = (0, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x04, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x04c] = (n_cap, 2);
        CAP_RANGE[0x11d] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x04a] = (n_cap, 1);
        CAP_RANGE[0x050] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x056] = (n_cap, 2);
        CAP_RANGE[0x06e] = (n_cap, 2);
        CAP_TABLE[n_cap] = (2, 0x20, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x20, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x057] = (n_cap, 1);
        CAP_RANGE[0x066] = (n_cap, 1);
        CAP_RANGE[0x06c] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x20, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x05a] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x18, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x05b] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x18, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x05f] = (n_cap, 1);
        CAP_RANGE[0x08a] = (n_cap, 1);
        CAP_RANGE[0x1a8] = (n_cap, 1);
        CAP_TABLE[n_cap] = (2, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x060] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x062] = (n_cap, 3);
        CAP_TABLE[n_cap] = (0, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x10, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x064] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x065] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x067] = (n_cap, 2);
        CAP_RANGE[0x086] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x20, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x20, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x06b] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x40, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x070] = (n_cap, 1);
        CAP_RANGE[0x0a4] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x10, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x071] = (n_cap, 1);
        CAP_RANGE[0x072] = (n_cap, 1);
        CAP_RANGE[0x07f] = (n_cap, 1);
        CAP_RANGE[0x0a3] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x073] = (n_cap, 2);
        CAP_RANGE[0x105] = (n_cap, 2);
        CAP_TABLE[n_cap] = (2, 0x10, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x076] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x04, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x077] = (n_cap, 1);
        CAP_TABLE[n_cap] = (2, 0x04, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x079] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x07a] = (n_cap, 1);
        CAP_TABLE[n_cap] = (2, 0x01, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x07b] = (n_cap, 1);
        CAP_TABLE[n_cap] = (2, 0x01, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x084] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x18, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x18, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x087] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x03, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x03, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x089] = (n_cap, 3);
        CAP_TABLE[n_cap] = (0, 0x03, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x10, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x094] = (n_cap, 3);
        CAP_RANGE[0x096] = (n_cap, 3);
        CAP_TABLE[n_cap] = (0, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x099] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0x20, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x09e] = (n_cap, 1);
        CAP_RANGE[0x09f] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x00, 0x04, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0a0] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0x186,0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0a1] = (n_cap, 1);
        CAP_RANGE[0x0a2] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0x01, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x0a5] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x90, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0a8] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0a9] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x10, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0aa] = (n_cap, 2);
        CAP_TABLE[n_cap] = (0, 0x10, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (1, 0x08, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x0ab] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0xd0, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0b3] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0x70, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0b6] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x02, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x10, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x0b7] = (n_cap, 3);
        CAP_TABLE[n_cap] = (1, 0x02, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x10, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x0b8] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x40, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x0b9] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x40, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x40, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0c3] = (n_cap, 1);
        CAP_TABLE[n_cap] = (2, 0x70, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0c7] = (n_cap, 1);
        CAP_TABLE[n_cap] = (3, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0ca] = (n_cap, 2);
        CAP_RANGE[0x0cc] = (n_cap, 2);
        CAP_RANGE[0x0cd] = (n_cap, 2);
        CAP_RANGE[0x0f2] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (2, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0ce] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x02, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x05, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_RANGE[0x0cf] = (n_cap, 3);
        CAP_TABLE[n_cap] = (1, 0x02, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (5, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0d0] = (n_cap, 1);
        CAP_TABLE[n_cap] = (3, 0x04, 0x01, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0dc] = (n_cap, 2);
        CAP_TABLE[n_cap] = (2, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0ee] = (n_cap, 2);
        CAP_TABLE[n_cap] = (2, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x08, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0f0] = (n_cap, 1);
        CAP_TABLE[n_cap] = (3, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x0f1] = (n_cap, 1);
        CAP_TABLE[n_cap] = (0, 0x88, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x104] = (n_cap, 2);
        CAP_TABLE[n_cap] = (1, 0x04, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x90, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x10a] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0xd0, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x112] = (n_cap, 1);
        CAP_TABLE[n_cap] = (1, 0x38, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x1aa] = (n_cap, 1);
        CAP_TABLE[n_cap] = (4, 0x80, 0x00, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_RANGE[0x1b9] = (n_cap, 3);
        CAP_TABLE[n_cap] = (1, 0x02, 0x10, TY_SIZEOBJ, RDWR); n_cap += 1;
        CAP_TABLE[n_cap] = (3, 0x10, 0x00, TY_SIZEOBJ, ROLY); n_cap += 1;
        CAP_TABLE[n_cap] = (4, 0x05, 0x01, TY_SIZEOBJ, ROLY); n_cap += 1;
    }
    bf_log_strHex(L_DEBUG, "n_cap = 0x\0", n_cap as u64);
}
#[inline(always)]pub fn get_syscall_cap_range(sid: u64) -> (usize, usize) {
    if sid as usize >= MAX_SYSID { log_strHex(L_ERROR, "get_syscall_cap_range: sid = 0x\0", sid); loop { } }
    unsafe { CAP_RANGE[sid as usize] }
}
#[inline(always)]pub fn get_syscall_cap(cap_idx: usize, ctxt: *mut Context) -> (u64, u64, u64, u8, bool) {
    let (reg_idx, src, info, ty, rw) = unsafe { CAP_TABLE[cap_idx] };
    let uvaddr = get_ctxt_idx(ctxt, reg_idx);
    let (size, unit) = match ty {
        TY_SOCKOPT => (src as u64, src as u64 + get_ctxt_idx(ctxt, CT_A3)),
        TY_MINCORE => (((get_ctxt_idx(ctxt, src) + PAGE_SIZE - 1) / PAGE_SIZE) * info as u64, info as u64),
        _ => if info == 0x00 { (src as u64, src as u64) } else { (get_ctxt_idx(ctxt, src) * info as u64, info as u64) },
    };
    (uvaddr, size, unit, ty, rw)
}